{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","role","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","disabled","length","newText","toUpperCase","showAlert","toLowerCase","navigator","clipboard","writeText","split","join","filter","element","defaultProps","about","Alert","height","alert","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7b42d552.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n        </li>\r\n        \r\n      </ul>\r\n      <div className=\"form-check form-switch\">\r\n  <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" onClick={props.toggleMode} id=\"flexSwitchCheckDefault\"/>\r\n  <label className={`form-check-label mx-3  text-${props.mode==='light'?'dark':'light'}`} htmlFor=\"flexSwitchCheckDefault\">Dark Mode</label>\r\n</div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes={\r\n    title:PropTypes.string.isRequired,\r\n    about:PropTypes.string,\r\n\r\n}\r\n\r\nNavbar.defaultProps ={\r\n    title:'Set title here',\r\n    about:'About text here'\r\n}\r\n","import React ,{useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Text Coverted in UpperCase\",\"success\")\r\n    }\r\n    const handleLwClick = ()=>{\r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"Text Coverted in LowerCase\",\"success\")\r\n    }\r\n    const handleClearClick = ()=>{\r\n        let newText = '';\r\n        setText(newText)\r\n        props.showAlert(\"Text Cleared\",\"success\")\r\n    }\r\n    const handleCopyClick = ()=>{\r\n        navigator.clipboard.writeText(text);\r\n        props.showAlert(\"Copied To Clipbord\",\"success\")\r\n    }\r\n    const handleSpace = ()=>{\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"))\r\n        props.showAlert(\"Extra Spaces Removed\",\"success\")\r\n\r\n    }\r\n    const handleOnChange = (event)=>{\r\n        setText(event.target.value);\r\n    }\r\n    const [text,setText]=useState(\"\");\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color:props.mode==='light'?'black':'white'}}>\r\n\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" value ={text} onChange={handleOnChange} style={{backgroundColor:props.mode==='light'?'white':'black',color:props.mode==='light'?'black':'white'}} id=\"myBox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button disabled={text.length===0} className=\" btn btn-danger mx-2 my-1\" onClick={handleUpClick}>Convert To UpperCase</button>\r\n            <button disabled={text.length===0} className=\" btn btn-info mx-2 my-1\" onClick={handleLwClick}>Convert To LowerCase</button>\r\n            <button disabled={text.length===0} className=\" btn btn-info mx-2 my-1\" onClick={handleClearClick}>Clear Text</button>\r\n            <button disabled={text.length===0} className=\" btn btn-primary mx-2 my-1\" onClick={handleCopyClick}>Copy Text</button>\r\n            <button disabled={text.length===0} className=\" btn btn-primary mx-2 my-1\" onClick={handleSpace}>Remove Extra Space</button>\r\n        </div>\r\n        <div className=\"container my-3\" style={{color:props.mode==='light'?'black':'white'}}>\r\n            <h2>Your Text Summary</h2>\r\n            <p>{text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} Words and {text.length} Characters</p>\r\n            <p>{0.008 * text.split(\" \").filter((element)=>{return element.length!==0}).length} Minutes to Read</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:\"Enter text above box \"}</p>\r\n        </div>\r\n         </>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase()+lower.slice(1);\r\n    }\r\n    return (\r\n        <div style={{height:'37px'}}>\r\n       { props.alert && <div>\r\n             <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n               <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n            </div>\r\n        </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n\r\n","// import logo from './logo.svg';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\nimport React, { useState } from 'react'\n\n\nfunction App() {\n  const [mode, setMode] = useState('light') // wheather dark mode is enable or not\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message,type)=>{\n    setAlert({\n      msg:message,\n      type:type\n    })\n  }\n  setTimeout(() => {\n    setAlert(null)\n  }, 1000);\n\n  const toggleMode = ()=>{\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor='black';\n      showAlert(\"Dark Mode Enable\",\"success\")\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor='white';\n      showAlert(\"Light Mode Enable\",\"success\")\n    }\n  }\n  return (\n    <>\n<Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode}/>\n<Alert alert={alert}/>\n\n<div className=\"container my-3\" >\n\n  <TextForm heading=\"Enter the Text below\" mode={mode} showAlert={showAlert}/>\n  \n  </div>\n\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}